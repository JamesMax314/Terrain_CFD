#version 450

#extension GL_EXT_debug_printf : enable

layout (local_size_x = 32) in;

// const int gridSize = 129;
const float dt = 0.1;
const int dim = 3;

layout(push_constant) uniform PushConstants {
    int gridSize;
    int shouldRed;
} pushConstants;

int gridSize = pushConstants.gridSize;

layout(binding = 0) buffer velXBuff { float vel_x[]; };
layout(binding = 1) buffer velYBuff { float vel_y[]; };
layout(binding = 2) buffer velZBuff { float vel_z[]; };

layout(binding = 3) buffer densityBuff { float density[]; };
layout(binding = 4) buffer pressureBuff { float pressure[]; };

layout(binding = 5) buffer density2Buff { float density2[]; };
layout(binding = 6) buffer pressure2Buff { float pressure2[]; };

layout(binding = 7) buffer boundariesBuff { float b[]; };

layout(binding = 8, rgba32f) writeonly uniform image3D outputTexture;

uint get_grid_ind(ivec3 pos, uint sizeX, uint sizeY, uint sizeZ) {
    return pos.x + pos.y * sizeX + pos.z * sizeX * sizeY;
}

int get_grid_index(ivec3 pos) {
    return pos.x + pos.y * gridSize + pos.z * gridSize * gridSize;
}

int get_grid_index_boundary(ivec3 pos, int mGridSize) {
    return pos.x + pos.y * mGridSize + pos.z * mGridSize * mGridSize;
}

vec3 get_grid_position(uint index) {
    uint x = index % gridSize;
    uint y = (index / gridSize) % gridSize;
    uint z = index / (gridSize * gridSize);
    return vec3(float(x), float(y), float(z));
}

float cell_vellX(ivec3 pos) {
    ivec3 p1 = pos + ivec3(1, 0, 0);

    float v1 = vel_x[get_grid_ind(pos, gridSize + 1, gridSize, gridSize)];
    float v2 = vel_x[get_grid_ind(p1, gridSize + 1, gridSize, gridSize)];
    return (v1 + v2) * 0.5;
}

float cell_vellY(ivec3 pos) {
    ivec3 p1 = pos + ivec3(0, 1, 0);

    float v1 = vel_y[get_grid_ind(pos, gridSize, gridSize + 1, gridSize)];
    float v2 = vel_y[get_grid_ind(p1, gridSize, gridSize + 1, gridSize)];
    return (v1 + v2) * 0.5;
}

float cell_vellZ(ivec3 pos) {
    ivec3 p1 = pos + ivec3(0, 0, 1);

    float v1 = vel_z[get_grid_ind(pos, gridSize, gridSize, gridSize + 1)];
    float v2 = vel_z[get_grid_ind(p1, gridSize, gridSize, gridSize + 1)];
    return (v1 + v2) * 0.5;
}

#define DEFINE_TRILINEAR_INTERPOLATION(NAME, ARRAY)                        \
float trilinearInterpolation_##NAME(vec3 pos) {                            \
    ivec3 p0 = ivec3(floor(pos));                                          \
    ivec3 p1 = p0 + ivec3(1);                                            \
    p0 = clamp(p0, 0, gridSize - 1);                                       \
    p1 = clamp(p1, 0, gridSize - 1);                                       \
    vec3 f = fract(pos);                                                   \
    float v000 = ARRAY[get_grid_index(p0)];                                \
    float v100 = ARRAY[get_grid_index(ivec3(p1.x, p0.y, p0.z))];           \
    float v010 = ARRAY[get_grid_index(ivec3(p0.x, p1.y, p0.z))];           \
    float v110 = ARRAY[get_grid_index(ivec3(p1.x, p1.y, p0.z))];           \
    float v001 = ARRAY[get_grid_index(ivec3(p0.x, p0.y, p1.z))];           \
    float v101 = ARRAY[get_grid_index(ivec3(p1.x, p0.y, p1.z))];           \
    float v011 = ARRAY[get_grid_index(ivec3(p0.x, p1.y, p1.z))];           \
    float v111 = ARRAY[get_grid_index(p1)];                                \
    float v00 = mix(v000, v100, f.x);                                      \
    float v10 = mix(v010, v110, f.x);                                      \
    float v01 = mix(v001, v101, f.x);                                      \
    float v11 = mix(v011, v111, f.x);                                      \
    float v0 = mix(v00, v10, f.y);                                         \
    float v1 = mix(v01, v11, f.y);                                         \
    return mix(v0, v1, f.z);                                               \
}
DEFINE_TRILINEAR_INTERPOLATION(density, density)
DEFINE_TRILINEAR_INTERPOLATION(pressure, pressure)

void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= gridSize * gridSize * gridSize) {
        return;
    }

    ivec3 pos = ivec3(get_grid_position(idx));

    int boundary_ind = get_grid_index_boundary(pos+ivec3(1), gridSize + 2);
    if (b[boundary_ind] == 0) {
        return;
    }

    float vel_x2 = cell_vellX(pos);
    float vel_y2 = cell_vellY(pos);
    float vel_z2 = cell_vellZ(pos);

    vec3 velocity = vec3(vel_x2, vel_y2, vel_z2);
    vec3 newPos = pos - velocity * dt;

    density2[idx] = trilinearInterpolation_density(newPos);

    // imageStore(outputTexture, pos, vec4(abs(vel_x2), abs(vel_y2), abs(vel_z2), 1.0));
    // imageStore(outputTexture, pos, vec4(vel_y2, -vel_y2, 0, 1.0));
    // imageStore(outputTexture, pos, vec4(density2[idx], density2[idx], density2[idx], 1.0));

    int boundary_ind2 = get_grid_index_boundary(pos+ivec3(1), gridSize + 2);
    imageStore(outputTexture, pos, vec4(b[boundary_ind2], b[boundary_ind2], b[boundary_ind2], 1.0));
}